module nat

import bool
import pair

-- Here's our data type definition.

||| A data type to represent the natural numbers.  We use a lower case
||| "n" in the name to distinguish our nat type from Idris's Nat type
data nat = O | S nat

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

oddb: nat -> bool
oddb n = not (evenb n)

{-(S r) is reduced to (S (S t)) which is, in turn, reduced to (S (S (S O))).
the evenb function is then applied to this value, which reduces to
evenb (S O). This value returns true.-}

||| given a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = S (addp (mkPair n m))

||| given a pair of natural numbers, return its product
multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair m (multp (mkPair n m)))

||| given a natural number, return its factorial
factp: nat -> nat
factp O = (S O)
factp (S n) = multp (mkPair (S n) (factp n))

||| given a pair of natural numbers, return the difference
subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m)) = subp (mkPair n m)

{- given a pair of natural numbers, return the result
of the first to the power of the second -}
exp: pair nat nat -> nat
exp (mkPair x O) = (S O)
exp (mkPair x (S n)) = multp (mkPair x (exp (mkPair (x) (n))))

{- given a pair of natural numbers, return true if the first is less than or
equal to the second, else return false -}
lep: pair nat nat -> bool
lep (mkPair O m) = true
lep (mkPair (S n) O) = false
lep (mkPair (S n) (S m)) = lep (mkPair n m)

{- given a pair of natural numbers, return true if they are equal,
else return false -}
eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair O (S n)) = false
eqp (mkPair (S n) O) = false
eqp (mkPair (S n) (S m)) = eqp (mkPair n m)

{- given a pair of natural numbers, return true if the first is greater
than the second, else return false -}
gtp: pair nat nat -> bool
gtp (mkPair n m) = not (lep (mkPair n m))

{- given a pair of natural numbers, return true if the first is greater than
or equal to the second, else return false -}
gep: pair nat nat -> bool
gep (mkPair n O) = true
gep (mkPair O (S n)) = false
gep (mkPair (S n) (S m)) = gep (mkPair n m)

{- given a pair of natural numbers, return true if the first is less than
the second, else return false -}
ltp: pair nat nat -> bool
ltp (mkPair n m) = not (gep (mkPair n m))

{- given a natural number, return the fibbonaci number
of that term in the sequence -}
fibp: nat -> nat
fibp O = O
fibp (S O) = (S O)
fibp (S (S n)) = addp (mkPair (fibp (S n)) (fibp n))
